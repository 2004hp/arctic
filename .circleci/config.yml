version: 2
jobs:
  build:
    working_directory: ~/manahl/arctic
    parallelism: 1
    shell: /bin/bash --login

    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

    docker:
#    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
#      command: /sbin/init
    - image: circleci/python:3-stretch
    
    steps:

    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
#    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
 
   # Restore the dependency cache
      # https://circleci.com/docs/2.0/language-python/
    - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
        key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}

    - run:
        name: Install Mongo
        command: |
          # MongoDB requiring SSL
          # wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian81-v3.4-latest.tgz
          # Legacy MongoDB without SSL
          wget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-v3.4-latest.tgz
          tar -zxvf mongodb-linux-x86_64-*-latest.tgz
          sudo mv mongodb-*/bin/* /usr/local/bin/
    - run: 
        name: Install arctic requirements
        command: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt
    - save_cache: # special step to save dependency cache
        key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
        paths:
          - "venv"
    - run: # run tests
        command: |
          . venv/bin/activate
          python setup.py test
    - store_artifacts: # special step to store test reports as artifacts
        path: test-reports/
        destination: tr1
 
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    # Python test inference is not supported by the config translator.
    # Put the commands that you use to run your tests here.
    # If run your tests in parallel containers you can use this third party nose plugin
    # https://github.com/dlanger/nose-parallel
    # If you use django you can switch to the nose django runner to make use of this.
    - run: echo "replace this with your test commands - see config comments" && false
    # This is based on your 1.0 configuration file or project settings
    - run: coveralls
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
