# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: ~/manahl/arctic
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    # no libssl in python:3 required by mongod
#    - image: circleci/python:3-stretch
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    
    steps:

    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
#    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
 
   # Restore the dependency cache
      # https://circleci.com/docs/2.0/language-python/
    - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
        key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
# Python image doens't obviously have libssl - not sure how to get it
#    - run:
#        name: Install Mongo
#        command: |
#          wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian81-v3.4-latest.tgz
#          tar -zxvf mongodb-linux-x86_64-debian81-v3.4-latest.tgz
#          sudo mv mongodb-*/bin/* /usr/local/bin/
    - run: 
        name: Install arctic requirements
        command: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt
    - save_cache: # special step to save dependency cache
        key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
        paths:
          - "venv"
    - run: # run tests
        command: |
          . venv/bin/activate
          python setup.py test
    - store_artifacts: # special step to store test reports as artifacts
        path: test-reports/
        destination: tr1
 
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    # Python test inference is not supported by the config translator.
    # Put the commands that you use to run your tests here.
    # If run your tests in parallel containers you can use this third party nose plugin
    # https://github.com/dlanger/nose-parallel
    # If you use django you can switch to the nose django runner to make use of this.
    - run: echo "replace this with your test commands - see config comments" && false
    # This is based on your 1.0 configuration file or project settings
    - run: coveralls
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
